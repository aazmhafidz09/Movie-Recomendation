# -*- coding: utf-8 -*-
"""Movie Recomend.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Kl6ld3yHvt99s2Velm7EL8A3mHkkIQng
"""

pip install pymining

from pymining import itemmining
import pandas as pd
import numpy as np
import random

from google.colab import files
upload = files.upload()

df = pd.read_excel('/content/movie_metadata.csv.xlsx')
df.head()

df.drop(['Unnamed: 28', 'User', 'Movie', 'Rating', 'color', 'num_critic_for_reviews', 'duration', 'director_facebook_likes', 'actor_3_facebook_likes' , 'actor_1_facebook_likes', 'gross', 'num_voted_users', 'cast_total_facebook_likes','facenumber_in_poster', 'plot_keywords','movie_imdb_link', 'num_user_for_reviews' , 'language', 'content_rating', 'budget', 'actor_2_facebook_likes', 'imdb_score', 'aspect_ratio','movie_facebook_likes', 'imdb_score', 'country','title_year' ], axis=1, inplace=True)

df.head()

df.shape

Movie=[]
for x in range(0,1000):
    Movie.append([str(df.values[x,y]) for y in range(0,6)])

Movie[:3]

len(Movie)

# Transactions = []
# user = [1, 2, 3]
# for x in range(0, 1000):
#   transaction[x][1]= random.choice(Movie)
#   trancsaction[x][2]= random.choice(Movie)
#   trancsaction[x][3]= random.choice(Movie)

def getReccomendation(r):
    for x in range(0,1000):
      if (Movie)[x][3] == r[3] or (Movie)[x][2] == r[0] or (Movie)[x][2] == r[2]:
        if Movie[x][4] != r[4]:
          return Movie[x]
        else:
          return random.choice(Movie)
      else: 
        return random.choice(Movie)

Mov_His=[]
User_His=[]
for x in range(0,1000):
    firtsMovie = (random.choice(Movie))
    User_His.append([])
    Mov_His.append([])
    Mov_His[x].append(getReccomendation(firtsMovie))
    for y in range(0,9):
      Mov_His[x].append(getReccomendation(Mov_His[x][y]))
      User_His[x].append(Mov_His[x][y][4].replace(u'\xa0', u''))

Mov_His[1]

transactions = User_His
transactions[:1]

PersonA,PersonB,PersonC=[],[],[]
for result in transactions: 
    PersonA.append(result[0])
    PersonB.append(result[1])
    PersonC.append(result[2])

    columns=list(zip(PersonA,PersonB,PersonC))
    dataset=pd.DataFrame(columns)
    dataset.columns=['Film yang dipilih','Film yang dipilih','Film yang dipilih']
dataset

from pymining import itemmining, assocrules, perftesting

sup = 0.003 

relim_input = itemmining.get_relim_input(transactions)
item_sets = itemmining.relim(relim_input, int(len(transactions) * sup))
rules = assocrules.mine_assoc_rules(item_sets, min_support=0.003, min_confidence=0.2)
rules

len(rules)

rules[1]

for x in rules : print (x,end = '\n')